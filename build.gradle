import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.7.3'
        classpath 'org.javamodularity:moduleplugin:1.8.12'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.google.osdetector'           version '1.7.3'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'net.nemerosa.versioning'         version '3.0.0'
}


normalization {
    runtimeClasspath { ignore('/META-INF/MANIFEST.MF') }
}

compileJava.options.verbose = true

repositories {
    mavenCentral()
}

Date buildTimeAndDate = new Date()
ext {
    description     = 'JavaFinder is a little tool that helps you to find all installed Java versions in a given path'
    buildDate       = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime       = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    platform        = osdetector.os == 'osx' ? osdetector.arch == 'aarch_64' ? 'mac-aarch64' : 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os == 'linux' ? osdetector.arch == 'aarch_64' ? 'linux-aarch64' : 'linux' : osdetector.os
    ciOssrhUsername = System.getenv('OSSRH_USERNAME')
    ciOssrhPassword = System.getenv('OSSRH_PASSWORD')
    ciGHUser        = System.getenv('GH_USER')
    ciGHToken       = System.getenv('GH_TOKEN')
    gpgkey          = System.getenv("GPG_PRIVATE_KEY")
    gpgpassphrase   = System.getenv("PASSPHRASE")
}

dependencies {
    implementation 'eu.hansolo:jdktools:17.0.27'
    implementation 'com.google.gradle:osdetector-gradle-plugin:1.7.3'
}

application {
    mainModule = 'eu.hansolo.javafinder'
    mainClass  = 'eu.hansolo.javafinder.Main'
}

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Built-By'              : System.properties['user.name'],
                'Created-By'            : System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date'            : project.buildDate,
                'Build-Time'            : project.buildTime,
                'Build-Revision'        : versioning.info.commit,
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://spdx.org/licenses/Apache-2.0.html',
                'Bundle-Description'    : 'JavaFinder is a little tool that helps you to find all installed Java versions in a given path',
                'Bundle-SymbolicName'   : 'eu.hansolo.javafinder',
                //'Class-Path'            : '${project.name}-${project.version}-fat.jar',
                //'Main-Class'            : 'eu.hansolo.javafinder.Main'
                'Class-Path'            : configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class'            : application.mainClass.get()
        )
    }
}

shadowJar {
    archiveClassifier.set('fat');
}

sourceSets {
    main {
        output.setResourcesDir(java.classesDirectory)
    }
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', application.mainClass.get()
        ]
        classpath = files()
    }
}